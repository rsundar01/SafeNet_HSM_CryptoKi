package com.ripple.pilots;

import com.sun.org.apache.xml.internal.resolver.helpers.PublicId;
import org.bouncycastle.asn1.*;
import org.bouncycastle.crypto.Signer;
import org.bouncycastle.crypto.generators.Ed25519KeyPairGenerator;
import org.bouncycastle.crypto.params.ECPrivateKeyParameters;
import org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters;
import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters;
import org.bouncycastle.util.encoders.Hex;

import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.KeyPair;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import java.util.Enumeration;

public class CompareEddsaImpls {

    public static void main(String[] args) throws Exception{
        KeyStoreManager keyStoreManager = KeyStoreManager.getInstance();
        keyStoreManager.keyStoreLogin();
        Ed25519Signer signer = new Ed25519Signer();
        String dataToSign = "Hello World, How are you doing?";
        byte[] dataBytesToSign = dataToSign.getBytes(StandardCharsets.UTF_8);

        // Luna JSP Signature
        // test_imported_ed25519_05 was generated by openssl and imported into Luna HSM
        byte[] signature = signer.sign(keyStoreManager, "test_imported_ed25519_05", dataBytesToSign);
        System.out.println("Signature: " + Hex.toHexString(signature));

        byte[] signature1 = parseASNSignature(signature);
        System.out.println("Signature converted: " + Hex.toHexString(signature1));

        // Luna JPROV Signature
        byte[] signature2 = LunaManager.getSignature("test_imported_ed25519_05", dataToSign);
        System.out.println("Signature2: " + Hex.toHexString(signature2));

        // Check JSP Signature matches with JPROV Signature
        if(Arrays.equals(signature1, signature2)) {
            System.out.println("Luna JSP and JPROV signature match");
        } else {
            System.out.println("Luna JSP and JPROV signature doesn't match");
        }

        // Bouncycastle Signature
        // Read Openssl generated key pair and use bouncy castle to sign
        Signer signerbc = new org.bouncycastle.crypto.signers.Ed25519Signer();
        Ed25519PrivateKeyParameters ed25519PrivateKeyBc = new Ed25519PrivateKeyParameters(readOpensslPrivateKey(), 0);
        Ed25519PublicKeyParameters ed25519PublicKeyBc = new Ed25519PublicKeyParameters(readOpensslPublicKey(), 0);
        Signer signerBc = new org.bouncycastle.crypto.signers.Ed25519Signer();
        signerBc.init(true, ed25519PrivateKeyBc);
        signerBc.update(dataBytesToSign, 0, dataBytesToSign.length);
        byte[] signature3 = signerBc.generateSignature();
        System.out.println("Signature3: " + Hex.toHexString(signature3));
        Signer verifierBc = new org.bouncycastle.crypto.signers.Ed25519Signer();
        verifierBc.init(false, ed25519PublicKeyBc);
        verifierBc.update(dataBytesToSign, 0, dataBytesToSign.length);
        System.out.println("Verification Result: " + verifierBc.verifySignature(signature3));

        // Check if Luna JSP Generated Signature matches BC Generated Signature
        if(Arrays.equals(signature1, signature3)) {
            System.out.println("Luna JSP Generated Signature matches BC Generated Signature");
        } else {
            System.out.println("Luna JSP Generated Signature doesn't match with BC Generated Signature");
        }

        //Signature from eddsa I2P Net Implementation
        KeyPair keypair = netI2pEdDSAUtil.getKeyPairFromFile();
        byte[] signature4 = netI2pEdDSAUtil.signUsingI2p(keypair.getPrivate(), dataBytesToSign);

        // Check if Signature from i2p impl matches with the rest
        if(Arrays.equals(signature1, signature4)) {
            System.out.println("I2P generated signature matches with JSP Signature");
        } else {
            System.out.println("I2P generated signature doesn't match with the jsp signature");
        }

    }


    public static byte[] parseASNSignature(byte[] bytes) throws IOException {
        ASN1Primitive p;
        ASN1InputStream input = new ASN1InputStream(bytes);
        StringBuffer sb = new StringBuffer();
        if ((p = input.readObject()) != null) {
            ASN1Sequence asn1 = ASN1Sequence.getInstance(p);
            ASN1Encodable asn1e1 = asn1.getObjectAt(0);
            ASN1Encodable asn1e2 = asn1.getObjectAt(1);
            Enumeration e = asn1.getObjects();
            while(e.hasMoreElements()) {
                ASN1Integer asn1Integer = ASN1Integer.getInstance(e.nextElement());
                byte[] data = asn1Integer.getEncoded();
                int initPtr = 2;
                if(data[initPtr] == 0) initPtr = 3;
                data = Arrays.copyOfRange(data, initPtr, data.length);
                sb.append(Hex.toHexString(data));
                System.out.println(Hex.toHexString(data));
            }
        }
        return Hex.decode(sb.toString());
    }

    public static byte[] readOpensslPrivateKey() throws Exception {
        byte[] privateKeyBytesOpenssl = KeyFileReader.readEd25519PrivKeyFromFile();
        System.out.println("Private openssl: " + Hex.toHexString(privateKeyBytesOpenssl));
        byte[] privateKeyBytes = KeyFormatter.asnEd25519PrivateKeyParserOpenssl(privateKeyBytesOpenssl);
        System.out.println("Private octets: " + Hex.toHexString(privateKeyBytes));
        return privateKeyBytes;
    }

    public static byte[] readOpensslPublicKey() throws Exception {
        byte[] publicKeyBytesOpenssl = KeyFileReader.readEd25519PubKeyFromFile();
        System.out.println("Public openssl: " + Hex.toHexString(publicKeyBytesOpenssl));
        byte[] publicKeyBytes = KeyFormatter.asnEd25519PublicKeyParserOpenssl(publicKeyBytesOpenssl);
        System.out.println("Public octets: " + Hex.toHexString(publicKeyBytes));
        return publicKeyBytes;
    }
}
